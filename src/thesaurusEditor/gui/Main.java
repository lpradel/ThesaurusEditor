/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Main.java
 *
 * Created on Mar 21, 2011, 12:14:59 PM
 */
package thesaurusEditor.gui;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.util.List;

import thesaurusEditor.Controller;
import thesaurusEditor.ExportException;
import thesaurusEditor.Schema;
import thesaurusEditor.URI;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import thesaurusEditor.gui.graph.MainGraph;

/**
 * 
 * @author sopr056
 */
public class Main extends javax.swing.JFrame {

    private Controller ctrl;
    private thesaurusTyp status;
    private JPanel[] panels = new JPanel[panelNummer.size.ordinal()];
    private zustandTyp zustand = zustandTyp.kein;
    private Schema aktuellesSchema = null;
    private MainGraph graph;
    private static final String graphExtension = ".graph";

    public enum panelNummer {

	hauptAnsicht, konzeptAnsicht, schemaAnsicht, laden, size;
    }

    private enum thesaurusTyp {

	kein, geladen, geladenUndGeaendert, neu;
    }

    // Enums um Festzustellen, ob gerade ein Konzept neu angelegt wird oder
    // nicht ... können wir bestimmt noch für andere sachen gebrauchen.
    private enum zustandTyp {

	kein, neu, vorhanden;
    }
    private String letzterDateiPfad = null;

    /** Creates new form Main */
    public Main(Controller ctrl) {
	this.setFocusable(true);

	this.ctrl = ctrl;
	initComponents();
	// this.add(new Suchen(this));
	this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
	this.setExtendedState(JFrame.MAXIMIZED_BOTH);
	this.setStatus(thesaurusTyp.kein);

	this.addKeyListener(new KeyListener() {

	    @Override
	    public void keyTyped(KeyEvent e) {
	    }

	    @Override
	    public void keyPressed(KeyEvent e) {
		try {
		    graph.keyEventHappened(e);
		} catch (Exception exc) {
		}
	    }

	    @Override
	    public void keyReleased(KeyEvent e) {
		try {
		    graph.keyEventHappened(e);
		} catch (Exception exc) {
		}
	    }
	});
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        diaAbout = new javax.swing.JDialog();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        lblFoto = new javax.swing.JLabel();
        lblThesaurus = new javax.swing.JLabel();
        lblDankTitel = new javax.swing.JLabel();
        lblClemens = new javax.swing.JLabel();
        lblDavid = new javax.swing.JLabel();
        lblLukas = new javax.swing.JLabel();
        lblMariella = new javax.swing.JLabel();
        lblJan = new javax.swing.JLabel();
        lblPaul = new javax.swing.JLabel();
        lblKorbi = new javax.swing.JLabel();
        lblDaniel = new javax.swing.JLabel();
        lblSarah = new javax.swing.JLabel();
        diaErzeugen = new javax.swing.JDialog();
        lblAufforderung = new javax.swing.JLabel();
        txtHauptsprache = new javax.swing.JTextField();
        txtKuerzel = new javax.swing.JTextField();
        btnErzeugen = new javax.swing.JButton();
        btnAbbrechen = new javax.swing.JButton();
        lblDomain = new javax.swing.JLabel();
        txtDomain = new javax.swing.JTextField();
        diaSprache = new javax.swing.JDialog();
        lblAufforderungNeueSprache = new javax.swing.JLabel();
        btnAbbrechenNeueSprache = new javax.swing.JButton();
        txtHauptspracheNeueSprache = new javax.swing.JTextField();
        txtKuerzelNeueSprache = new javax.swing.JTextField();
        btnErzeugenNeueSprache = new javax.swing.JButton();
        diaUri = new javax.swing.JDialog();
        lblUriName = new javax.swing.JLabel();
        btnUriAbbrechen = new javax.swing.JButton();
        btnUriOk = new javax.swing.JButton();
        txtUriUri = new javax.swing.JTextField();
        diaLaden = new javax.swing.JDialog();
        lblLadenText = new javax.swing.JLabel();
        lblLadenIcon = new javax.swing.JLabel();
        diaHotkeys = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        main = new javax.swing.JPanel();
        mbMain = new javax.swing.JMenuBar();
        mDatei = new javax.swing.JMenu();
        miNeu = new javax.swing.JMenuItem();
        miLaden = new javax.swing.JMenuItem();
        miSuchen = new javax.swing.JMenuItem();
        miSpeichern = new javax.swing.JMenuItem();
        miSpeichernUnter = new javax.swing.JMenuItem();
        miExportieren = new javax.swing.JMenuItem();
        miBeenden = new javax.swing.JMenuItem();
        mHilfe = new javax.swing.JMenu();
        miHotkeys = new javax.swing.JMenuItem();
        miUeber = new javax.swing.JMenuItem();

        diaAbout.setTitle("About Us");
        diaAbout.setLocationByPlatform(true);
        diaAbout.setMinimumSize(new java.awt.Dimension(570, 480));
        diaAbout.setResizable(false);

        lblFoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/FotoGruppe.jpg"))); // NOI18N
        lblFoto.setMaximumSize(new java.awt.Dimension(400, 300));
        lblFoto.setMinimumSize(new java.awt.Dimension(400, 300));
        lblFoto.setPreferredSize(new java.awt.Dimension(400, 300));
        lblFoto.setBounds(10, 10, 390, 280);
        jLayeredPane1.add(lblFoto, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lblThesaurus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/SoPraGraph.png"))); // NOI18N
        lblThesaurus.setBounds(410, 260, 320, 250);
        jLayeredPane1.add(lblThesaurus, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lblDankTitel.setFont(new java.awt.Font("DejaVu Sans", 1, 14));
        lblDankTitel.setText("Danksagungen Gruppe 5:");
        lblDankTitel.setBounds(410, 20, 220, -1);
        jLayeredPane1.add(lblDankTitel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lblClemens.setText("<html><b>Clemens:</b><br><br>Allen die am Sopra11a beteiligt waren.</html>");
        lblClemens.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblClemens.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblClemens.setBounds(650, 40, 80, 210);
        jLayeredPane1.add(lblClemens, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lblDavid.setText("<html><b>David:</b><br><br>Ich danke meinen Eltern, meiner Oma und meiner Freundin, für die Geduld mit mir!</html>");
        lblDavid.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblDavid.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblDavid.setBounds(410, 40, 80, 210);
        jLayeredPane1.add(lblDavid, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lblLukas.setText("<html><b>Lukas:</b><br><br>Hi Mom, I'm on TV!</html>");
        lblLukas.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblLukas.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblLukas.setBounds(490, 40, 80, 210);
        jLayeredPane1.add(lblLukas, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lblMariella.setText("<html><b>Mariella:</b><br>Ich bedanke mich bei dem ganzen Sopra-Team, meiner Gruppe und besonders Clemens.Das war echt nett mit euch zu arbeiten. </html>");
        lblMariella.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblMariella.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblMariella.setBounds(10, 300, 80, 210);
        jLayeredPane1.add(lblMariella, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lblJan.setText("<html><b>Jan:</b><br><br> Ich danke mir, weil ich so awesome bin!</html>");
        lblJan.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblJan.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblJan.setBounds(330, 300, 80, 210);
        jLayeredPane1.add(lblJan, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lblPaul.setText("<html><b>Paul:</b><br><br>Ich danke<br>meiner<br>Gruppe und<br>den<br>Erstellern<br>des JUNG-<br>Frameworks</html>");
        lblPaul.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblPaul.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblPaul.setBounds(90, 300, 80, 210);
        jLayeredPane1.add(lblPaul, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lblKorbi.setText("<html><b>Korbi:</b><br> Ich danke den Schotten und meinen Chiptunes, dass Sie diesen Tag möglich gemacht haben.</html>");
        lblKorbi.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblKorbi.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblKorbi.setBounds(570, 40, 80, 210);
        jLayeredPane1.add(lblKorbi, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lblDaniel.setText("<html><b>Daniel:</b><br><br> \"Hast du committet?\" <br>\"Ja.\"<br>\"Ok, ich update... oh nein, revert das!!\"</html>");
        lblDaniel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblDaniel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblDaniel.setBounds(170, 300, 80, 210);
        jLayeredPane1.add(lblDaniel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lblSarah.setText("<html><b>Sarah:</b><br><br>Thank god, I'm a woman.</html>");
        lblSarah.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblSarah.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblSarah.setBounds(250, 300, 80, 210);
        jLayeredPane1.add(lblSarah, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout diaAboutLayout = new javax.swing.GroupLayout(diaAbout.getContentPane());
        diaAbout.getContentPane().setLayout(diaAboutLayout);
        diaAboutLayout.setHorizontalGroup(
            diaAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 737, Short.MAX_VALUE)
        );
        diaAboutLayout.setVerticalGroup(
            diaAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
        );

        diaErzeugen.setTitle("Anlegen eines neuen Thesaurus");
        diaErzeugen.setMinimumSize(new java.awt.Dimension(440, 186));
        diaErzeugen.setResizable(false);

        lblAufforderung.setText("Geben Sie bitte eine Hauptsprache für Ihren Thesaurus ein:");

        txtHauptsprache.setText("Hauptsprache");
        txtHauptsprache.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtHauptspracheFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtHauptspracheFocusLost(evt);
            }
        });

        txtKuerzel.setText("Kürzel");
        txtKuerzel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtKuerzelFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtKuerzelFocusLost(evt);
            }
        });

        btnErzeugen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/dialog_ok_apply.png"))); // NOI18N
        btnErzeugen.setText("Erzeugen");
        btnErzeugen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnErzeugenActionPerformed(evt);
            }
        });

        btnAbbrechen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/dialog_cancel.png"))); // NOI18N
        btnAbbrechen.setText("Abbrechen");
        btnAbbrechen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbbrechenActionPerformed(evt);
            }
        });

        lblDomain.setText("Bitte geben Sie die Basis-Domain für den Thesaurus an:");

        txtDomain.setText("http://www.domain.com/");
        txtDomain.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDomainFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDomainFocusLost(evt);
            }
        });

        javax.swing.GroupLayout diaErzeugenLayout = new javax.swing.GroupLayout(diaErzeugen.getContentPane());
        diaErzeugen.getContentPane().setLayout(diaErzeugenLayout);
        diaErzeugenLayout.setHorizontalGroup(
            diaErzeugenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(diaErzeugenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(diaErzeugenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAufforderung, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                    .addGroup(diaErzeugenLayout.createSequentialGroup()
                        .addComponent(txtHauptsprache, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtKuerzel, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))
                    .addComponent(txtDomain, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                    .addGroup(diaErzeugenLayout.createSequentialGroup()
                        .addComponent(btnAbbrechen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 211, Short.MAX_VALUE)
                        .addComponent(btnErzeugen))
                    .addComponent(lblDomain, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE))
                .addContainerGap())
        );
        diaErzeugenLayout.setVerticalGroup(
            diaErzeugenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(diaErzeugenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAufforderung)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(diaErzeugenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHauptsprache, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtKuerzel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lblDomain)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDomain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(diaErzeugenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAbbrechen)
                    .addComponent(btnErzeugen))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        diaSprache.setTitle("Sprache Hinzufügen");

        lblAufforderungNeueSprache.setText("Geben Sie bitte eine Sprache und ein zugehöriges Kürzel ein:");

        btnAbbrechenNeueSprache.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/dialog_cancel.png"))); // NOI18N
        btnAbbrechenNeueSprache.setText("Abbrechen");
        btnAbbrechenNeueSprache.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbbrechenNeueSpracheActionPerformed(evt);
            }
        });

        txtHauptspracheNeueSprache.setText("Sprache");
        txtHauptspracheNeueSprache.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtHauptspracheNeueSpracheFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtHauptspracheNeueSpracheFocusLost(evt);
            }
        });

        txtKuerzelNeueSprache.setText("Kürzel");
        txtKuerzelNeueSprache.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtKuerzelNeueSpracheFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtKuerzelNeueSpracheFocusLost(evt);
            }
        });

        btnErzeugenNeueSprache.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/dialog_ok_apply.png"))); // NOI18N
        btnErzeugenNeueSprache.setText("Hinzufügen");
        btnErzeugenNeueSprache.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnErzeugenNeueSpracheActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout diaSpracheLayout = new javax.swing.GroupLayout(diaSprache.getContentPane());
        diaSprache.getContentPane().setLayout(diaSpracheLayout);
        diaSpracheLayout.setHorizontalGroup(
            diaSpracheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(diaSpracheLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(diaSpracheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAufforderungNeueSprache)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, diaSpracheLayout.createSequentialGroup()
                        .addComponent(btnAbbrechenNeueSprache)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 208, Short.MAX_VALUE)
                        .addComponent(btnErzeugenNeueSprache))
                    .addGroup(diaSpracheLayout.createSequentialGroup()
                        .addComponent(txtHauptspracheNeueSprache, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtKuerzelNeueSprache, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)))
                .addContainerGap())
        );
        diaSpracheLayout.setVerticalGroup(
            diaSpracheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(diaSpracheLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAufforderungNeueSprache)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(diaSpracheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHauptspracheNeueSprache, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtKuerzelNeueSprache, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(diaSpracheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnErzeugenNeueSprache)
                    .addComponent(btnAbbrechenNeueSprache))
                .addContainerGap())
        );

        diaUri.setTitle("URI Ändern");
        diaUri.setMinimumSize(new java.awt.Dimension(400, 150));

        lblUriName.setFont(new java.awt.Font("Ubuntu", 0, 24));
        lblUriName.setText("<Name>");

        btnUriAbbrechen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/dialog_cancel.png"))); // NOI18N
        btnUriAbbrechen.setText("Abbrechen");
        btnUriAbbrechen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUriAbbrechenActionPerformed(evt);
            }
        });

        btnUriOk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/dialog_ok_apply.png"))); // NOI18N
        btnUriOk.setText("OK");
        btnUriOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUriOkActionPerformed(evt);
            }
        });

        txtUriUri.setText("URI");

        javax.swing.GroupLayout diaUriLayout = new javax.swing.GroupLayout(diaUri.getContentPane());
        diaUri.getContentPane().setLayout(diaUriLayout);
        diaUriLayout.setHorizontalGroup(
            diaUriLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(diaUriLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(diaUriLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblUriName)
                    .addGroup(diaUriLayout.createSequentialGroup()
                        .addComponent(btnUriAbbrechen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 211, Short.MAX_VALUE)
                        .addComponent(btnUriOk))
                    .addComponent(txtUriUri, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE))
                .addContainerGap())
        );
        diaUriLayout.setVerticalGroup(
            diaUriLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(diaUriLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblUriName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUriUri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(diaUriLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUriAbbrechen)
                    .addComponent(btnUriOk))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        diaLaden.setTitle("Laden");

        lblLadenText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLadenText.setText("Bitte warten Sie, während der Thesaurus geladen wird ...");

        lblLadenIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLadenIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/ajax-loader.gif"))); // NOI18N

        javax.swing.GroupLayout diaLadenLayout = new javax.swing.GroupLayout(diaLaden.getContentPane());
        diaLaden.getContentPane().setLayout(diaLadenLayout);
        diaLadenLayout.setHorizontalGroup(
            diaLadenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, diaLadenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(diaLadenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblLadenIcon, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(lblLadenText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE))
                .addContainerGap())
        );
        diaLadenLayout.setVerticalGroup(
            diaLadenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(diaLadenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLadenText)
                .addGap(18, 18, 18)
                .addComponent(lblLadenIcon)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        diaHotkeys.setTitle("Hotkeys");
        diaHotkeys.setName("Hotkeys"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"[Leertaste]", "Graph verschieben"},
                {"[^] + [Klick]", "Konzept verschieben"},
                {"[Strg] + [Klick]", "Konzept zentrieren"},
                {"[Shift] + [^]", "Konzepte selektieren"}
            },
            new String [] {
                "Hotkey", "Funktion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout diaHotkeysLayout = new javax.swing.GroupLayout(diaHotkeys.getContentPane());
        diaHotkeys.getContentPane().setLayout(diaHotkeysLayout);
        diaHotkeysLayout.setHorizontalGroup(
            diaHotkeysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(diaHotkeysLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        diaHotkeysLayout.setVerticalGroup(
            diaHotkeysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(diaHotkeysLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(700, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyEvent(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyEvent(evt);
            }
        });

        javax.swing.GroupLayout mainLayout = new javax.swing.GroupLayout(main);
        main.setLayout(mainLayout);
        mainLayout.setHorizontalGroup(
            mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );
        mainLayout.setVerticalGroup(
            mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 575, Short.MAX_VALUE)
        );

        mbMain.setPreferredSize(new java.awt.Dimension(88, 32));

        mDatei.setText("Datei");

        miNeu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        miNeu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/filenew.png"))); // NOI18N
        miNeu.setText("Neu");
        miNeu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNeuActionPerformed(evt);
            }
        });
        mDatei.add(miNeu);

        miLaden.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        miLaden.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/fileopen.png"))); // NOI18N
        miLaden.setText("Laden");
        miLaden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLadenActionPerformed(evt);
            }
        });
        mDatei.add(miLaden);

        miSuchen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miSuchen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/filefind.png"))); // NOI18N
        miSuchen.setText("Suche nach Konzepten ohne bevorzugten Bezeichner");
        miSuchen.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/filefind_disabled.png"))); // NOI18N
        miSuchen.setEnabled(false);
        miSuchen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSuchenActionPerformed(evt);
            }
        });
        mDatei.add(miSuchen);

        miSpeichern.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        miSpeichern.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/filesave.png"))); // NOI18N
        miSpeichern.setText("Speichern");
        miSpeichern.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/filesave_disabled.png"))); // NOI18N
        miSpeichern.setEnabled(false);
        miSpeichern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSpeichernActionPerformed(evt);
            }
        });
        mDatei.add(miSpeichern);

        miSpeichernUnter.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        miSpeichernUnter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/filesaveas.png"))); // NOI18N
        miSpeichernUnter.setText("Speichern unter");
        miSpeichernUnter.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/filesaveas_disabled.png"))); // NOI18N
        miSpeichernUnter.setEnabled(false);
        miSpeichernUnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSpeichernUnterActionPerformed(evt);
            }
        });
        mDatei.add(miSpeichernUnter);

        miExportieren.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        miExportieren.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/fileexport.png"))); // NOI18N
        miExportieren.setText("Exportieren");
        miExportieren.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/fileexport_disabled.png"))); // NOI18N
        miExportieren.setEnabled(false);
        miExportieren.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExportierenActionPerformed(evt);
            }
        });
        mDatei.add(miExportieren);

        miBeenden.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        miBeenden.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/application_exit.png"))); // NOI18N
        miBeenden.setText("Beenden");
        miBeenden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miBeendenActionPerformed(evt);
            }
        });
        mDatei.add(miBeenden);

        mbMain.add(mDatei);

        mHilfe.setText("Hilfe");

        miHotkeys.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/hotkeys.png"))); // NOI18N
        miHotkeys.setText("Hotkeys");
        miHotkeys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miHotkeysActionPerformed(evt);
            }
        });
        mHilfe.add(miHotkeys);

        miUeber.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/help_about.png"))); // NOI18N
        miUeber.setText("Über");
        miUeber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miUeberActionPerformed(evt);
            }
        });
        mHilfe.add(miUeber);

        mbMain.add(mHilfe);

        setJMenuBar(mbMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miHotkeysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miHotkeysActionPerformed
	this.diaHotkeys.setVisible(true);
	this.diaHotkeys.setBounds(10, 10, 400, 150);
	this.diaHotkeys.setSize(400, 160);
    }//GEN-LAST:event_miHotkeysActionPerformed

    private void miNeuActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_miNeuActionPerformed
	if (!(status == thesaurusTyp.kein || status == thesaurusTyp.geladen)) { // nur
	    // wenn
	    // wirklich
	    // ein
	    // Thesaurus
	    // erstellt
	    // oder
	    // geladen
	    // wurde
	    String[] options = {"Ja", "Nein"};
	    OptionPane optionPane = new OptionPane(
		    null,
		    "Wollen Sie den aktuellen Thesaurus speichern, bevor Sie einen neuen erstellen?",
		    "Bitte bestätigen", options);
	    String gewaehlt = (String) optionPane.pane.getValue();
	    if (gewaehlt.equals("Ja")) {
		this.miSpeichernActionPerformed(null);
		OptionPane secondPane = new OptionPane(
			null,
			"Wollen Sie weiterhin einen neuen Thesaurus erstellen?",
			"Neuer Thesaurus", new String[]{"Ja"});
		gewaehlt = (String) secondPane.pane.getValue();
		if (gewaehlt.equals("Ja")) { // für Ja
		    this.diaErzeugen.setVisible(true);
		    this.diaErzeugen.setBounds(10, 10, 425, 150);
		}
	    } else if (gewaehlt.equals("Nein")) {
		this.diaErzeugen.setVisible(true);
		this.diaErzeugen.setBounds(10, 10, 425, 150);
	    }
	} else {
	    this.diaErzeugen.setVisible(true);
	    this.diaErzeugen.setBounds(10, 10, 425, 150);
	}
    }// GEN-LAST:event_miNeuActionPerformed

    private void miSpeichernActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_miSpeichernActionPerformed
	if (status == thesaurusTyp.kein) {
	    return;
	}
	if (status != thesaurusTyp.neu && this.letzterDateiPfad != null) {
	    ctrl.speichern(this.letzterDateiPfad);
	    try {
		graph.saveLayout(this.letzterDateiPfad.concat(graphExtension));
	    } catch (java.io.IOException ex) {
		ex.printStackTrace();
	    }
	    JOptionPane.showMessageDialog(null,
		    "Ihr Thesaurus wurde gespeichert.",
		    "Thesaurus gespeichert", JOptionPane.INFORMATION_MESSAGE);
	} else {
	    this.miSpeichernUnterActionPerformed(evt); // es wird verfahren wie
	    // bei speichern unter
	}
	this.setStatus(thesaurusTyp.geladen);
    }// GEN-LAST:event_miSpeichernActionPerformed

    private void miLadenActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_miLadenActionPerformed
	if (!(status == thesaurusTyp.kein || status == thesaurusTyp.geladen)) { // nur
	    // wenn
	    // wirklich
	    // ein
	    // Thesaurus
	    // erstellt
	    // oder
	    // geladen
	    // wurde
	    String[] options = {"Ja", "Nein"};
	    OptionPane optionPane = new OptionPane(
		    null,
		    "Wollen Sie den aktuellen Thesaurus speichern, bevor Sie einen anderen laden?",
		    "Bitte bestätigen", options);
	    String gewaehlt = (String) optionPane.pane.getValue();
	    if (gewaehlt.equals("Ja")) {
		this.miSpeichernActionPerformed(null);
		OptionPane optionPane2 = new OptionPane(null,
			"Wollen Sie weiterhin einen Thesaurus Laden?", "Laden",
			new String[]{"Ja"});
		String auswahl = (String) optionPane2.pane.getValue();
		if (auswahl.equals("Ja")) { // für Ja
		    this.laden();
		}
	    } else if (gewaehlt.equals("Nein")) {
		this.laden();
	    }
	} else {
	    this.laden();
	}

    }// GEN-LAST:event_miLadenActionPerformed

    private void miBeendenActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_miBeendenActionPerformed
	if (!(status == thesaurusTyp.kein || status == thesaurusTyp.geladen)) { // nur
	    // wenn
	    // wirklich
	    // ein
	    // Thesaurus
	    // erstellt
	    // oder
	    // geladen
	    // wurde
	    String[] options = {"Ja", "Nein"};
	    OptionPane optionPane = new OptionPane(null,
		    "Wollen Sie wirklich beenden ohne zu speichern?",
		    "Bitte bestätigen", options);
	    String gewaehlt = (String) optionPane.pane.getValue();
	    if (gewaehlt.equals("Ja")) {
		this.dispose();
		System.exit(0);
	    } else if (gewaehlt.equals("Nein")) {
		this.miSpeichernActionPerformed(null);
		this.dispose();
		System.exit(0);
	    }
	} else {
	    this.dispose();
	    System.exit(0);
	}
    }// GEN-LAST:event_miBeendenActionPerformed

    private void miSpeichernUnterActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_miSpeichernUnterActionPerformed
	String auswahl = "";
	if (status == thesaurusTyp.kein) {
	    return;
	}
	JFileChooser fileChooser = new JFileChooser();
	FileNameExtensionFilter filter = new FileNameExtensionFilter(
		"Thesaurus", "thesaurus");
	fileChooser.setFileFilter(filter);
	int wahl = fileChooser.showSaveDialog(this);
	if (wahl == JFileChooser.APPROVE_OPTION) {
	    String selectedPath = fileChooser.getSelectedFile().getAbsolutePath();
	    File gewaehlt = null;
	    if (selectedPath.endsWith(".thesaurus")) {
		gewaehlt = new File(selectedPath);
	    } else {
		gewaehlt = new File(selectedPath + ".thesaurus");
	    }
	    if (gewaehlt == null) {
		JOptionPane.showMessageDialog(null,
			"Fehler beim Speichern aufgetreten!", "FEHLER!",
			JOptionPane.ERROR_MESSAGE);
		return;
	    }
	    int shouldWrite = 0;
	    if (gewaehlt.exists()) {
		OptionPane optionPane = new OptionPane(
			null,
			"Diese Datei existiert bereits. Wollen Sie die Datei überschreiben?",
			"Überschreiben bestätigen", new String[]{"Ja"});
		auswahl = (String) optionPane.pane.getValue();
	    }
	    if (auswahl.equals("Ja") || auswahl.equals("")) {
		try {
		    graph.saveLayout(gewaehlt.getAbsolutePath().concat(
			    graphExtension));
		} catch (java.io.IOException ex) {
		    ex.printStackTrace();
		}
		ctrl.speichern(gewaehlt.getAbsolutePath());
		JOptionPane.showMessageDialog(null,
			"Ihr Thesaurus wurde gespeichert.",
			"Thesaurus gespeichert",
			JOptionPane.INFORMATION_MESSAGE);
	    } else {
		miSpeichernUnterActionPerformed(evt);
	    }
	}
	this.setStatus(thesaurusTyp.geladen);
    }// GEN-LAST:event_miSpeichernUnterActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_formWindowClosing
	this.miBeendenActionPerformed(null);
    }// GEN-LAST:event_formWindowClosing

    private void btnErzeugenActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnErzeugenActionPerformed

	/* Fehlerhafte Eingaben fangen */

	if (!URI.checkDomain(this.txtDomain.getText())) {
	    JOptionPane.showMessageDialog(
		    null,
		    "Die eingegebene Domain ist nicht gültig. Bitte geben Sie eine gültige Domain an.",
		    "Domain ungültig", JOptionPane.WARNING_MESSAGE);
	    return;
	}

	if (this.txtHauptsprache.getText().trim().isEmpty()) {
	    JOptionPane.showMessageDialog(this,
		    "Es muss ein Bezeichner für die Sprache angegeben werden!",
		    "Fehlerhafte Sprache", JOptionPane.ERROR_MESSAGE);
	    return;
	}

	if (this.txtKuerzel.getText().trim().length() > 7) {
	    JOptionPane.showMessageDialog(this,
		    "Das Kürzel darf höchstens 7 Zeichen lang sein!",
		    "Fehlerhaftes Kürzel", JOptionPane.ERROR_MESSAGE);
	    return;
	}

	/* Erzeugen-Bildschirm verstecken */
	this.diaErzeugen.setVisible(false);

	/* Wir haben eine Domain, die auch gueltig ist */
	if (!this.txtDomain.getText().endsWith("/")) {
	    this.txtDomain.setText(this.txtDomain.getText() + "/"); // ggf. "/"
	}																	// ans Ende
	// setzen

	/* Thesaurus anlegen */
	if (ctrl != null && ctrl.getThesaurus() != null) {
	    ctrl.getThesaurus().closeThesaurus();
	}
	ctrl.createThesaurus(this.txtHauptsprache.getText(), this.txtKuerzel.getText());
	ctrl.getThesaurus().setBaseDomain(this.txtDomain.getText()); /*
	 * Domain
	 * uebernehmen
	 */

	/* Hauptbildschirm zeigen */
	this.removePanel(panelNummer.hauptAnsicht);
	this.showPanel(panelNummer.hauptAnsicht);
	// Alten zustand wiederherstellen:
	this.txtHauptsprache.setText("Hauptsprache");
	this.txtKuerzel.setText("Kürzel");
	this.txtDomain.setText("http://www.domain.com/");
	// Last Action
	this.setStatus(thesaurusTyp.neu);
	// ((Suchen)this.panels[panelNummer.hauptAnsicht.ordinal()]).requestFocus();
    }// GEN-LAST:event_btnErzeugenActionPerformed

    private void btnAbbrechenActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnAbbrechenActionPerformed
	this.diaErzeugen.setVisible(false);
	this.txtHauptsprache.setText("Hauptsprache");
	this.txtKuerzel.setText("Kürzel");
	this.txtDomain.setText("http://www.domain.com/");
    }// GEN-LAST:event_btnAbbrechenActionPerformed

    private void txtHauptspracheFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtHauptspracheFocusGained
	if (this.txtHauptsprache.getText().equals("Hauptsprache")) {
	    this.txtHauptsprache.setText("");
	}
    }// GEN-LAST:event_txtHauptspracheFocusGained

    private void txtKuerzelFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtKuerzelFocusGained
	if (this.txtKuerzel.getText().equals("Kürzel")) {
	    this.txtKuerzel.setText("");
	}
    }// GEN-LAST:event_txtKuerzelFocusGained

    private void txtHauptspracheFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtHauptspracheFocusLost
	if (this.txtHauptsprache.getText().equals("")) {
	    this.txtHauptsprache.setText("Hauptsprache");
	}
    }// GEN-LAST:event_txtHauptspracheFocusLost

    private void txtKuerzelFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtKuerzelFocusLost
	if (this.txtKuerzel.getText().equals("")) {
	    this.txtKuerzel.setText("Kürzel");
	}
    }// GEN-LAST:event_txtKuerzelFocusLost

    private void miExportierenActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_miExportierenActionPerformed
	if (!(status == thesaurusTyp.kein)) {

	    /* Zyklen-Warnung */
	    if (ctrl.getThesaurus().hatZyklen()) {
		OptionPane optionPane = new OptionPane(null,
			"Die Konzepte im Thesaurus enthalten zyklische Verbindungen!\n"
			+ "Wollen Sie trotzdem exportieren?",
			"Zyklen im Thesaurus", new String[]{"Ja"});
		String gewaehlt = (String) optionPane.pane.getValue();
		if (!gewaehlt.equals("Ja")) {
		    return;
		}
	    }

	    String pfad = null;

	    /* Pfad holen */
	    JFileChooser fileChooser = new JFileChooser();
	    FileNameExtensionFilter filter = new FileNameExtensionFilter(
		    "XML/RDF", "xml");
	    fileChooser.setFileFilter(filter);
	    int wahl = fileChooser.showSaveDialog(this);
	    if (wahl == JFileChooser.APPROVE_OPTION) {
		pfad = fileChooser.getSelectedFile().getAbsolutePath();
		if (!pfad.endsWith(".xml")) { /* XML-Endung sichern */
		    pfad = pfad + ".xml";
		}

		/* Exportieren */
		try {
		    ctrl.exportieren(pfad);
		    JOptionPane.showMessageDialog(this,
			    "Thesaurus erfolgreich exportiert!");
		} catch (ExportException e) {
		    JOptionPane.showMessageDialog(this,
			    "Fehler beim Exportieren:\n" + e.getMessage());
		}
	    }
	}
    }// GEN-LAST:event_miExportierenActionPerformed

    private void btnAbbrechenNeueSpracheActionPerformed(
	    java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnAbbrechenNeueSpracheActionPerformed
	this.diaSprache.setVisible(false);
	this.txtHauptspracheNeueSprache.setText("Sprache");
	this.txtKuerzelNeueSprache.setText("Kürzel");
    }// GEN-LAST:event_btnAbbrechenNeueSpracheActionPerformed

    private void txtHauptspracheNeueSpracheFocusGained(
	    java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtHauptspracheNeueSpracheFocusGained
	if (this.txtHauptspracheNeueSprache.getText().equals("Sprache")) {
	    this.txtHauptspracheNeueSprache.setText("");
	}
    }// GEN-LAST:event_txtHauptspracheNeueSpracheFocusGained

    private void txtHauptspracheNeueSpracheFocusLost(
	    java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtHauptspracheNeueSpracheFocusLost
	if (this.txtHauptspracheNeueSprache.getText().isEmpty()) {
	    this.txtHauptspracheNeueSprache.setText("Sprache");
	}
    }// GEN-LAST:event_txtHauptspracheNeueSpracheFocusLost

    private void txtKuerzelNeueSpracheFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtKuerzelNeueSpracheFocusGained
	if (this.txtKuerzelNeueSprache.getText().equals("Kürzel")) {
	    this.txtKuerzelNeueSprache.setText("");
	}
    }// GEN-LAST:event_txtKuerzelNeueSpracheFocusGained

    private void txtKuerzelNeueSpracheFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtKuerzelNeueSpracheFocusLost
	if (this.txtKuerzelNeueSprache.getText().isEmpty()) {
	    this.txtKuerzelNeueSprache.setText("Kürzel");
	}
    }// GEN-LAST:event_txtKuerzelNeueSpracheFocusLost

    private void btnErzeugenNeueSpracheActionPerformed(
	    java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnErzeugenNeueSpracheActionPerformed
	if (this.txtKuerzelNeueSprache.getText().trim().length() > 7) {
	    JOptionPane.showMessageDialog(this,
		    "Das Kürzel darf höchstens 7 Zeichen lang sein!",
		    "Fehlerhaftes Kürzel", JOptionPane.ERROR_MESSAGE);
	    return;
	}
	if (this.txtHauptspracheNeueSprache.getText().trim().isEmpty()) {
	    JOptionPane.showMessageDialog(this,
		    "Es muss ein Bezeichner für die Sprache angegeben werden!",
		    "Fehlerhafte Sprache", JOptionPane.ERROR_MESSAGE);
	    return;
	}
	//TODO: Überprüfung, ob die Sprache schon vorhanden ist. Falls ja, entsprechenden Hinweis dem Benutzer zeigen!
	this.ctrl.addSprache(this.txtHauptspracheNeueSprache.getText(),
		this.txtKuerzelNeueSprache.getText());
	this.diaSprache.setVisible(false);
	this.txtHauptspracheNeueSprache.setText("Sprache");
	this.txtKuerzelNeueSprache.setText("Kürzel");
	JOptionPane.showMessageDialog(this,
		    "Die Sprache " + txtHauptspracheNeueSprache.getText() + " wurde erfolgreich hinzugefügt.",
		    "Sprache hinzugefügt", JOptionPane.INFORMATION_MESSAGE);
	this.fuehreAus("Changed");
    }// GEN-LAST:event_btnErzeugenNeueSpracheActionPerformed

    private void btnUriOkActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnUriOkActionPerformed
	if (this.panel(panelNummer.konzeptAnsicht) != null) {
	    this.ctrl.setURI(this.txtUriUri.getText().trim());
	}
	if (this.panel(panelNummer.schemaAnsicht) != null) {
	    this.ctrl.setSchemaURI(this.aktuellesSchema, this.txtUriUri.getText().trim());
	}
	this.diaUri.setVisible(false);
    }// GEN-LAST:event_btnUriOkActionPerformed

    private void btnUriAbbrechenActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnUriAbbrechenActionPerformed
	this.diaUri.setVisible(false);
    }// GEN-LAST:event_btnUriAbbrechenActionPerformed

    private void miSuchenActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_miSuchenActionPerformed
	((HauptAnsicht) this.panel(panelNummer.hauptAnsicht)).showKonzepte(this.ctrl.getThesaurus().sucheOhneBevBezeichnung());
    }// GEN-LAST:event_miSuchenActionPerformed

    private void txtDomainFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtDomainFocusGained
	this.txtDomain.select(this.txtDomain.getText().indexOf(".") + 1,
		this.txtDomain.getText().lastIndexOf("."));
    }// GEN-LAST:event_txtDomainFocusGained

    private void txtDomainFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtDomainFocusLost
	this.txtDomain.select(0, 0);
    }// GEN-LAST:event_txtDomainFocusLost

    private void miUeberActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_miUeberActionPerformed
	diaAbout.setVisible(true);
	diaAbout.setBounds(100, 100, 740, 540);
    }// GEN-LAST:event_miUeberActionPerformed

    private void formKeyEvent(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_formKeyEvent
	if (panel(panelNummer.hauptAnsicht) != null) {
	    ((HauptAnsicht) panel(panelNummer.hauptAnsicht)).getMainGraph().keyEventHappened(evt);
	}
    }// GEN-LAST:event_formKeyEvent

    /**
     * @param args
     *            the command line arguments
     */
    public static void main(String args[]) {
	java.awt.EventQueue.invokeLater(new Runnable() {

	    @Override
	    public void run() {
		new Main(new Controller()).setVisible(true);
	    }
	});
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbbrechen;
    private javax.swing.JButton btnAbbrechenNeueSprache;
    private javax.swing.JButton btnErzeugen;
    private javax.swing.JButton btnErzeugenNeueSprache;
    private javax.swing.JButton btnUriAbbrechen;
    private javax.swing.JButton btnUriOk;
    private javax.swing.JDialog diaAbout;
    private javax.swing.JDialog diaErzeugen;
    private javax.swing.JDialog diaHotkeys;
    private javax.swing.JDialog diaLaden;
    private javax.swing.JDialog diaSprache;
    private javax.swing.JDialog diaUri;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblAufforderung;
    private javax.swing.JLabel lblAufforderungNeueSprache;
    private javax.swing.JLabel lblClemens;
    private javax.swing.JLabel lblDaniel;
    private javax.swing.JLabel lblDankTitel;
    private javax.swing.JLabel lblDavid;
    private javax.swing.JLabel lblDomain;
    private javax.swing.JLabel lblFoto;
    private javax.swing.JLabel lblJan;
    private javax.swing.JLabel lblKorbi;
    private javax.swing.JLabel lblLadenIcon;
    private javax.swing.JLabel lblLadenText;
    private javax.swing.JLabel lblLukas;
    private javax.swing.JLabel lblMariella;
    private javax.swing.JLabel lblPaul;
    private javax.swing.JLabel lblSarah;
    private javax.swing.JLabel lblThesaurus;
    private javax.swing.JLabel lblUriName;
    private javax.swing.JMenu mDatei;
    private javax.swing.JMenu mHilfe;
    private javax.swing.JPanel main;
    private javax.swing.JMenuBar mbMain;
    private javax.swing.JMenuItem miBeenden;
    private javax.swing.JMenuItem miExportieren;
    private javax.swing.JMenuItem miHotkeys;
    private javax.swing.JMenuItem miLaden;
    private javax.swing.JMenuItem miNeu;
    private javax.swing.JMenuItem miSpeichern;
    private javax.swing.JMenuItem miSpeichernUnter;
    private javax.swing.JMenuItem miSuchen;
    private javax.swing.JMenuItem miUeber;
    private javax.swing.JTextField txtDomain;
    private javax.swing.JTextField txtHauptsprache;
    private javax.swing.JTextField txtHauptspracheNeueSprache;
    private javax.swing.JTextField txtKuerzel;
    private javax.swing.JTextField txtKuerzelNeueSprache;
    private javax.swing.JTextField txtUriUri;
    // End of variables declaration//GEN-END:variables
    // Hier mal die Menüs speichern, falls man die entfernen möchte.
    private javax.swing.JMenu mHinzufuegen;
    private javax.swing.JMenu mErweitert;

    public void fuehreAus(String s) {
	if (s.equals("Suchen_KonzeptÖffnen")) {
	    this.showPanel(panelNummer.konzeptAnsicht);
	} else if (s.equals("Main_createKonzept")) {
	    this.ctrl.addKonzept("neues Konzept");
	    this.zustand = zustandTyp.neu;
	    this.showPanel(panelNummer.konzeptAnsicht);
	} else if (s.equals("Main_createSchema")) {
	    String name = JOptionPane.showInputDialog(this,
		    "Bitte geben sie den Namen des Schemas ein:",
		    "Neues Schema erstellen", JOptionPane.QUESTION_MESSAGE);
	    if (name == null) {
		return;
	    }
	    while (name != null && name.trim().isEmpty()) {
		name = JOptionPane.showInputDialog(this,
			"Bitte geben sie den Namen des Schemas ein:",
			"Neues Schema erstellen", JOptionPane.QUESTION_MESSAGE);
	    }
	    if (name == null) {
		return;
	    }
	    ctrl.addSchema(name);
	    this.zustand = zustandTyp.neu;
	    List<Schema> liste = ctrl.getThesaurus().getSchemata();
	    aktuellesSchema = liste.get(liste.size() - 1);
	    showPanel(panelNummer.schemaAnsicht);
	} else if (s.equals("Main_editSchema")) {
	    this.aktuellesSchema = ((HauptAnsicht) this.panel(panelNummer.hauptAnsicht)).getSelectedSchema();
	    showPanel(panelNummer.schemaAnsicht);
	} else if (s.equals("Main_createSprache")) {
	    this.diaSprache.setVisible(true);
	    this.diaSprache.setBounds(10, 10, 425, 150);
	} else if (s.equals("KonzeptAnsicht_Abbruch")) {
	    if (this.zustand == zustandTyp.neu) {
		this.ctrl.removeKonzept();
		this.zustand = zustandTyp.kein;
	    }
	    this.removePanel(panelNummer.konzeptAnsicht);
	    this.showPanel(panelNummer.hauptAnsicht);
	} else if (s.equals("KonzeptAnsicht_Ok")) {
	    if (this.zustand == zustandTyp.neu) {
		this.zustand = zustandTyp.kein;
	    }
	    this.removePanel(panelNummer.konzeptAnsicht);
	    this.showPanel(panelNummer.hauptAnsicht);
	} else if (s.equals("SchemaBearbeiten_OK")) {
	    if (this.zustand == zustandTyp.neu) {
		this.zustand = zustandTyp.kein;
	    }
	    this.removePanel(panelNummer.schemaAnsicht);
	    this.showPanel(panelNummer.hauptAnsicht);
	} else if (s.equals("SchemaBearbeiten_Abbruch")) {
	    if (this.zustand == zustandTyp.neu) {
		this.ctrl.removeSchema(aktuellesSchema);
		this.zustand = zustandTyp.kein;
	    }
	    this.removePanel(panelNummer.schemaAnsicht);
	    this.showPanel(panelNummer.hauptAnsicht);
	} else if (s.equals("URI_Aendern")) {
	    this.showChangeUri();
	    if (this.panel(panelNummer.konzeptAnsicht) != null) {
		this.lblUriName.setText(this.ctrl.getAktuellesKonzept().toString());
		this.txtUriUri.setText(this.ctrl.getAktuellesKonzept().getURI().getUri().split("#")[1]);
	    }
	    if (this.panel(panelNummer.schemaAnsicht) != null) {
		this.lblUriName.setText(this.aktuellesSchema.toString());
		this.txtUriUri.setText(this.aktuellesSchema.getURI().getUri().split("#")[1]);
	    }
	} else if (s.equals("Changed")) {
	    this.setStatus(thesaurusTyp.geladenUndGeaendert);
	} else if (s.equals("")) {
	}
    }

    private void showChangeUri() {
	this.diaUri.setVisible(true);
	this.diaUri.setBounds(20, 20, 425, 200);
    }

    private class LadenHelper implements Runnable {

	private String path;
	private Main main;

	public LadenHelper(String path, Main main) {
	    this.path = path;
	    this.main = main;
	}

	@Override
	public void run() {
	    ctrl.laden(this.path);
	    removePanel(panelNummer.hauptAnsicht);
	    showPanel(panelNummer.hauptAnsicht);
	    try {
		graph.loadLayout(this.path.concat(graphExtension));
	    } catch (java.io.IOException ex) {
		ex.printStackTrace();
	    }
	    setStatus(thesaurusTyp.geladen);
	    ladenFinished();
	}
    }

    private void laden() {
	JFileChooser fileChooser = new JFileChooser();
	FileNameExtensionFilter filter = new FileNameExtensionFilter(
		"Thesaurus", "thesaurus");
	fileChooser.setFileFilter(filter);
	int wahl = fileChooser.showOpenDialog(this);
	if (wahl == JFileChooser.APPROVE_OPTION) {
	    File gewaehlt = fileChooser.getSelectedFile();
	    this.letzterDateiPfad = gewaehlt.getAbsolutePath(); // Pfad bekomm
	    // Methode
	    // änderbar
	    LadenHelper laden = new LadenHelper(this.letzterDateiPfad, this);
	    this.diaLaden.setVisible(true);
	    this.diaLaden.setBounds(10, 10, 400, 150);
	    // new Thread(laden).start();
	    // laden.run();
	    SwingUtilities.invokeLater(laden);
	}
    }

    private void ladenFinished() {
	this.diaLaden.setVisible(false);
    }

    /**
     * Setzt den Status und die enabled oder disabled die MenuItems zum
     * speichern, exportieren, ...
     *
     * @param status
     *            status, der gesetzt werden soll.
     */
    private void setStatus(thesaurusTyp status) {
	this.status = status;
	switch (status) {
	    case kein:
		this.miSuchen.setEnabled(false);
		this.miSpeichern.setEnabled(false);
		this.miSpeichernUnter.setEnabled(false);
		this.miExportieren.setEnabled(false);
		break;
	    case geladen:
		this.miSuchen.setEnabled(true);
		this.miSpeichern.setEnabled(false);
		this.miSpeichernUnter.setEnabled(true);
		this.miExportieren.setEnabled(true);
		break;
	    case geladenUndGeaendert:
		this.miSuchen.setEnabled(true);
		this.miSpeichern.setEnabled(true);
		this.miSpeichernUnter.setEnabled(true);
		this.miExportieren.setEnabled(true);
		break;
	    case neu:
		this.miSuchen.setEnabled(true);
		this.miSpeichern.setEnabled(true);
		this.miSpeichernUnter.setEnabled(true);
		this.miExportieren.setEnabled(true);
		break;
	}
    }

    public void showMenuItemErzeugen() { // Fügt Menüding da zum erzeugen von
	// Konzept und Schema
	if (mHinzufuegen == null) {
	    mHinzufuegen = new JMenu();
	    mHinzufuegen.setText("Hinzufügen");

	    JMenuItem miKonzept = new JMenuItem();
	    JMenuItem miSchema = new JMenuItem();
	    JMenuItem miSprache = new JMenuItem();

	    miKonzept.setText("Konzept");
	    miKonzept.setIcon(new javax.swing.ImageIcon(getClass().getResource(
		    "/thesaurusEditor/img/filenew.png"))); // NOI18N
	    miKonzept.addActionListener(new java.awt.event.ActionListener() {

		@Override
		public void actionPerformed(java.awt.event.ActionEvent evt) {
		    fuehreAus("Main_createKonzept");
		}
	    });

	    miSchema.setText("Schema");
	    miSchema.setIcon(new javax.swing.ImageIcon(getClass().getResource(
		    "/thesaurusEditor/img/folder_new.png"))); // NOI18N
	    miSchema.addActionListener(new java.awt.event.ActionListener() {

		@Override
		public void actionPerformed(java.awt.event.ActionEvent evt) {
		    fuehreAus("Main_createSchema");
		}
	    });

	    miSprache.setText("Sprache");
	    miSprache.setIcon(new javax.swing.ImageIcon(getClass().getResource(
		    "/thesaurusEditor/img/world.png"))); // NOI18N
	    miSprache.addActionListener(new java.awt.event.ActionListener() {

		@Override
		public void actionPerformed(java.awt.event.ActionEvent evt) {
		    fuehreAus("Main_createSprache");
		}
	    });

	    mHinzufuegen.add(miKonzept);
	    mHinzufuegen.add(miSchema);
	    mHinzufuegen.add(miSprache);
	}

	// Hilfe immer als letztes
	java.awt.Component tmp = mbMain.getComponent(mbMain.getComponentCount() - 1);
	mbMain.remove(tmp);
	mbMain.add(mHinzufuegen);
	mbMain.add(tmp);
    }

    // Eigentlich finde ich, dass man beide Menüs zu Bearbeiten vereinen sollte,
    // können wir aber morgen drüber reden.
    // Vlt. doch nicht ..., müssen mal schaun, uri bearbeiten geht ja nur wenn
    // was geöffnet ist ^^
    public void showURIaendern() { // Fuegt Menueding zum Aendern der URI hinzu
	if (mErweitert == null) {
	    mErweitert = new JMenu();
	    mErweitert.setText("Erweitert");

	    JMenuItem miURI = new JMenuItem();

	    miURI.setText("URI ändern");
	    miURI.setIcon(new javax.swing.ImageIcon(getClass().getResource(
		    "/thesaurusEditor/img/exec.png"))); // NOI18N
	    miURI.addActionListener(new java.awt.event.ActionListener() {

		@Override
		public void actionPerformed(java.awt.event.ActionEvent evt) {
		    fuehreAus("URI_Aendern");
		}
	    });

	    mErweitert.add(miURI);
	}

	// Hilfe immer als letztes
	java.awt.Component tmp = mbMain.getComponent(mbMain.getComponentCount() - 1);
	mbMain.remove(tmp);
	mbMain.add(mErweitert);
	mbMain.add(tmp);
    }

    public void hideURIaendern() {
	mbMain.remove(this.mErweitert);
	this.repaint();
    }

    public void hideMenuItemErzeugen() {
	mbMain.remove(this.mHinzufuegen);
	this.repaint();
    }

    public JPanel panel(panelNummer nummer) {
	return this.panels[nummer.ordinal()];
    }

    private void showPanel(panelNummer nummer) {
	// Alle verstecken
	for (JPanel p : this.panels) {
	    if (p != null) {
		p.setVisible(false);
	    }
	}
	

	// nur das anzeigen, was gebraucht wird.
	switch (nummer) {
	    case hauptAnsicht:
		if (this.panel(nummer) == null) {
		    this.panels[nummer.ordinal()] = new HauptAnsicht(this, ctrl);

		}
		this.graph = ((HauptAnsicht) this.panel(panelNummer.hauptAnsicht)).getMainGraph();
		this.showMenuItemErzeugen();
		break;
	    case konzeptAnsicht:
		if (this.panel(nummer) == null) {
		    this.panels[nummer.ordinal()] = new KonzeptAnsicht(this, ctrl,
			    ctrl.getAktuellesKonzept());
		}
		this.hideMenuItemErzeugen();
		this.showURIaendern();
		break;
	    case schemaAnsicht:
		if (this.panel(nummer) == null) {
		    this.panels[nummer.ordinal()] = new SchemaBearbeiten(this,
			    aktuellesSchema, ctrl);
		}
		this.hideMenuItemErzeugen();
		this.showURIaendern();
		break;
	}
	this.panel(nummer).setVisible(true);
	this.createPanelHelper(nummer);
	// this.main.setVisible(true);

    }

    private void createPanelHelper(panelNummer nummer) {
	javax.swing.GroupLayout layout = new javax.swing.GroupLayout(main);
	main.setLayout(layout);
	layout.setHorizontalGroup(layout.createParallelGroup(
		javax.swing.GroupLayout.Alignment.LEADING).addComponent(
		panel(nummer), javax.swing.GroupLayout.DEFAULT_SIZE,
		javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
	layout.setVerticalGroup(layout.createParallelGroup(
		javax.swing.GroupLayout.Alignment.LEADING).addComponent(
		panel(nummer), javax.swing.GroupLayout.DEFAULT_SIZE,
		javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
    }

    private void removePanel(panelNummer nummer) {
	switch (nummer) {
	    case konzeptAnsicht:
		this.showMenuItemErzeugen();
		this.hideURIaendern();
		break;
	    case schemaAnsicht:
		this.showMenuItemErzeugen();
		this.hideURIaendern();
		// ((HauptAnsicht)
		// this.panel(panelNummer.hauptAnsicht)).removeSchemaSelection();
		break;
	}
	if (this.panel(nummer) != null) {
	    this.panel(nummer).setVisible(false);
	    this.panels[nummer.ordinal()] = null;
	}
	// Keine Ahnung ob man das darf, oder obs einem um die ohren fliegt ...
	main.setLayout(null);
    }

    public Controller getController() {
	return this.ctrl;
    }
}
