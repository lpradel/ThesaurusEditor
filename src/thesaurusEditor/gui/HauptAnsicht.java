/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ThesaurusBearbeiten.java
 *
 * Created on Mar 15, 2011, 2:07:56 PM
 */
package thesaurusEditor.gui;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.DefaultListModel;
import javax.swing.JPanel;

import thesaurusEditor.BezeichnungsTyp;
import thesaurusEditor.Konzept;
import thesaurusEditor.Schema;
import thesaurusEditor.Sprache;
import thesaurusEditor.Sprachrepraesentation;
import thesaurusEditor.Thesaurus;
import thesaurusEditor.URI;
import thesaurusEditor.gui.graph.MainGraph;

/**
 * 
 * @author sopr056
 */
public class HauptAnsicht extends javax.swing.JPanel implements Observer {

    private thesaurusEditor.Controller ctrl;
    private Date suchErgebnisClicked = null;
    private Object graphAnzeige = null;
    private List<Konzept>[] suchErgebnisse;
    private Main main;
    final JPanel mainGraph;
    protected static final Sprache alleSprachen = new Sprache("alle", "all");
    private List<Konzept> anzuzeigen;
    //Dreckige Lösung um Fehler in der Table anzeigen zu können.
    private static Konzept keineSuchergebnisse;

    /*
     * alter Konstruktor, rausgenommen, weil überflüssig public Suchen(Main
     * main, thesaurusEditor.Controller ctrl, List<Sprache> sprachen,
     * List<Schema> schemata) {
     */
    /** Creates new form ThesaurusBearbeiten */
    public HauptAnsicht(Main main, thesaurusEditor.Controller ctrl) {
	this.ctrl = ctrl;
	this.main = main;

	HauptAnsicht.keineSuchergebnisse = new Konzept("Keine Ergebnisse gefunden", this.ctrl.getThesaurus().getHauptSprache(), URI.genKonzeptURI("http://www.domain.com/", "doesNotExist#12345678901234567890123456789"));

	ctrl.getThesaurus().addObserver(this);
	initComponents();

	// Graph hinzufügen
	this.mainGraph = this.graphErzeugen(ctrl.getThesaurus().getKonzepte());
	this.showGraph(this.mainGraph);

	List<Sprache> sprachen = this.ctrl.getThesaurus().getSprachen();
	sprachen.add(alleSprachen);
	cbSprache.setModel(new javax.swing.DefaultComboBoxModel(sprachen.toArray()));

	showSchemaListe(ctrl.getThesaurus().getSchemata());
	this.btnSuchen.setFocusCycleRoot(true);
	// JTable table = (JTable)tblSuchergebnisse.getEditorComponent();
	// table.sete
	this.setVisible(true);
	// Erstmal spätere Größe setzen.
	spSchemaSplitter.setDividerLocation((int) this.getSize().getWidth() - 200);
	// Danach verstecken, weil wir den Benutzer erstmal nicht damit
	// behelligen wollen.
	this.suchErgebnisse = new java.util.ArrayList[3];
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlSuchen = new javax.swing.JPanel();
        txtSuchen = new javax.swing.JTextField();
        cbSprache = new javax.swing.JComboBox();
        btnSuchen = new javax.swing.JButton();
        btnSucheLoeschen = new javax.swing.JButton();
        spSuchSplitter = new javax.swing.JSplitPane();
        spSchemaSplitter = new javax.swing.JSplitPane();
        pnlGraph = new javax.swing.JPanel();
        pnlSchemata = new javax.swing.JPanel();
        lblTitelSchema = new javax.swing.JLabel();
        scrListeSchemata = new javax.swing.JScrollPane();
        lstSchemata = new javax.swing.JList();
        btnBearbeiten = new javax.swing.JButton();
        scrSuchergebnisse = new javax.swing.JScrollPane();
        tblSuchergebnisse = new javax.swing.JTable();

        setMaximumSize(new java.awt.Dimension(800, 800));
        setMinimumSize(new java.awt.Dimension(500, 400));
        setPreferredSize(new java.awt.Dimension(550, 400));

        pnlSuchen.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtSuchen.setText("Hier Suchwort eingeben");
        txtSuchen.setMaximumSize(new java.awt.Dimension(160, 25));
        txtSuchen.setMinimumSize(new java.awt.Dimension(160, 25));
        txtSuchen.setPreferredSize(new java.awt.Dimension(160, 25));
        txtSuchen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSuchenActionPerformed(evt);
            }
        });
        txtSuchen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSuchenFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSuchenFocusLost(evt);
            }
        });
        txtSuchen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSuchenKeyReleased(evt);
            }
        });

        cbSprache.setMaximumSize(new java.awt.Dimension(160, 25));
        cbSprache.setMinimumSize(new java.awt.Dimension(160, 25));
        cbSprache.setPreferredSize(new java.awt.Dimension(160, 25));

        btnSuchen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/find.png"))); // NOI18N
        btnSuchen.setText("Suchen");
        btnSuchen.setMaximumSize(new java.awt.Dimension(160, 25));
        btnSuchen.setMinimumSize(new java.awt.Dimension(160, 25));
        btnSuchen.setPreferredSize(new java.awt.Dimension(160, 25));
        btnSuchen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuchenActionPerformed(evt);
            }
        });

        btnSucheLoeschen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/delete.png"))); // NOI18N
        btnSucheLoeschen.setText("Suche löschen");
        btnSucheLoeschen.setEnabled(false);
        btnSucheLoeschen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSucheLoeschenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSuchenLayout = new javax.swing.GroupLayout(pnlSuchen);
        pnlSuchen.setLayout(pnlSuchenLayout);
        pnlSuchenLayout.setHorizontalGroup(
            pnlSuchenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSuchenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtSuchen, javax.swing.GroupLayout.PREFERRED_SIZE, 148, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbSprache, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSuchen, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSucheLoeschen)
                .addContainerGap())
        );
        pnlSuchenLayout.setVerticalGroup(
            pnlSuchenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSuchenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSuchenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSuchen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSuchen, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbSprache, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSucheLoeschen, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        spSuchSplitter.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        spSuchSplitter.setDividerLocation(0);
        spSuchSplitter.setDividerSize(0);
        spSuchSplitter.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        spSchemaSplitter.setDividerLocation(350);
        spSchemaSplitter.setResizeWeight(1.0);
        spSchemaSplitter.setOneTouchExpandable(true);

        pnlGraph.setBorder(null);

        javax.swing.GroupLayout pnlGraphLayout = new javax.swing.GroupLayout(pnlGraph);
        pnlGraph.setLayout(pnlGraphLayout);
        pnlGraphLayout.setHorizontalGroup(
            pnlGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );
        pnlGraphLayout.setVerticalGroup(
            pnlGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 340, Short.MAX_VALUE)
        );

        spSchemaSplitter.setLeftComponent(pnlGraph);

        lblTitelSchema.setText(" Schemata:");

        lstSchemata.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstSchemata.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstSchemataMouseClicked(evt);
            }
        });
        scrListeSchemata.setViewportView(lstSchemata);

        btnBearbeiten.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thesaurusEditor/img/edit.png"))); // NOI18N
        btnBearbeiten.setText("Bearbeiten");
        btnBearbeiten.setEnabled(false);
        btnBearbeiten.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBearbeitenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSchemataLayout = new javax.swing.GroupLayout(pnlSchemata);
        pnlSchemata.setLayout(pnlSchemataLayout);
        pnlSchemataLayout.setHorizontalGroup(
            pnlSchemataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnBearbeiten, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
            .addComponent(scrListeSchemata, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
            .addComponent(lblTitelSchema, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
        );
        pnlSchemataLayout.setVerticalGroup(
            pnlSchemataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSchemataLayout.createSequentialGroup()
                .addComponent(lblTitelSchema)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrListeSchemata, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBearbeiten, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        spSchemaSplitter.setRightComponent(pnlSchemata);

        spSuchSplitter.setRightComponent(spSchemaSplitter);

        scrSuchergebnisse.setBackground(new java.awt.Color(234, 156, 78));
        scrSuchergebnisse.setMinimumSize(new java.awt.Dimension(0, 0));

        tblSuchergebnisse.setBackground(new java.awt.Color(253, 250, 198));
        tblSuchergebnisse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Bevorzugte Bezeichnung", "Alternative Bezeichnungen", "Bemerkung"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSuchergebnisse.setUpdateSelectionOnSort(false);
        tblSuchergebnisse.setVerifyInputWhenFocusTarget(false);
        tblSuchergebnisse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSuchergebnisseMouseClicked(evt);
            }
        });
        scrSuchergebnisse.setViewportView(tblSuchergebnisse);

        spSuchSplitter.setLeftComponent(scrSuchergebnisse);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlSuchen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(spSuchSplitter, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlSuchen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spSuchSplitter, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

        private void lstSchemataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstSchemataMouseClicked
	    if (lstSchemata.getCellBounds(0, lstSchemata.getLastVisibleIndex()).contains(evt.getPoint())) {
		Calendar calendar = Calendar.getInstance();
		Date now = calendar.getTime();
		thesaurusEditor.Schema aktuelles = (Schema) this.lstSchemata.getSelectedValue();
		if (suchErgebnisClicked != null && (now.getTime() - suchErgebnisClicked.getTime()) < 350) {
		    this.btnBearbeitenActionPerformed(null);
		} else {
		    //System.out.println("Single clicked");
		    if (this.graphAnzeige != null && aktuelles == this.graphAnzeige) {
			//System.out.println("Einfacher Klick, Schema deselecten");
			this.lstSchemata.clearSelection();
			this.btnBearbeiten.setEnabled(false);
			this.graphAnzeige = null;
			this.showGraph(this.mainGraph);
		    } else if (aktuelles != null) {
			//System.out.println("Einfacher Klick, Schema selecten");
			tblSuchergebnisse.clearSelection();
			this.konzepteInSchema(aktuelles);
			this.graphAnzeige = aktuelles;
			this.showGraph(this.graphErzeugen(this.anzuzeigen));
			this.btnBearbeiten.setEnabled(true);
		    }
		}
		suchErgebnisClicked = now;
	    }
	    else
	    {
		this.lstSchemata.clearSelection();
		this.btnBearbeiten.setEnabled(false);
		this.graphAnzeige = null;
		this.showGraph(this.mainGraph);
	    }
        }//GEN-LAST:event_lstSchemataMouseClicked

	private void btnSucheLoeschenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSucheLoeschenActionPerformed
	    this.spSuchSplitter.setDividerLocation(0);
	    this.txtSuchen.setText("Hier Suchwort eingeben");
	    this.btnSucheLoeschen.setEnabled(false);
	    this.tblSuchergebnisse.clearSelection();
	    this.graphAnzeige = null;
	    this.showGraph(this.mainGraph);
	}//GEN-LAST:event_btnSucheLoeschenActionPerformed

	private void txtSuchenKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSuchenKeyReleased
	    if (evt.getKeyCode() == KeyEvent.VK_ESCAPE || this.txtSuchen.getText().isEmpty()) {
		//Suche löschen
		this.btnSucheLoeschenActionPerformed(null);
		//danach focus gained, damit das Textfeld wieder leer ist
		this.txtSuchenFocusGained(null);
	    } else {
		this.btnSuchenActionPerformed(null);
	    }
	}//GEN-LAST:event_txtSuchenKeyReleased

    private void txtSuchenActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_txtSuchenActionPerformed
	this.btnSuchenActionPerformed(evt);
    }// GEN-LAST:event_txtSuchenActionPerformed

    private void btnSuchenActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnSuchenActionPerformed
	//System.out.println(this.txtSuchen.getText());
	if (graphAnzeige != null) {
	    this.showGraph(this.mainGraph);
	    graphAnzeige = null;
	}
	if (!txtSuchen.getText().isEmpty()
		&& !txtSuchen.getText().equals(
		"Geben Sie bitte ein Suchwort ein!")
		&& !txtSuchen.getText().equals("Hier Suchwort eingeben")) {
	    if (cbSprache.getSelectedItem().equals(alleSprachen)) {
		suchErgebnisse = new ArrayList[3];
		suchErgebnisse[0] = new ArrayList<Konzept>();
		suchErgebnisse[1] = new ArrayList<Konzept>();
		suchErgebnisse[2] = new ArrayList<Konzept>();
		for (Sprache s : this.ctrl.getThesaurus().getSprachen()) {
		    List<Konzept>[] list = ctrl.suchen(txtSuchen.getText(), s);
		    suchErgebnisse[0].addAll(list[0]);
		    suchErgebnisse[1].addAll(list[1]);
		    suchErgebnisse[2].addAll(list[2]);
		}
	    } else {
		suchErgebnisse = ctrl.suchen(txtSuchen.getText(),
			((Sprache) cbSprache.getSelectedItem()));
	    }
	    if (suchErgebnisse == null
		    || (suchErgebnisse[0].isEmpty()
		    && suchErgebnisse[1].isEmpty() && suchErgebnisse[2].isEmpty())) {
		/*JOptionPane.showMessageDialog(this,
		"Es wurden keine Konzepte gefunden!",
		"Suche erfolglos", JOptionPane.INFORMATION_MESSAGE);*/
		suchErgebnisse = new ArrayList[3];
		suchErgebnisse[0] = new ArrayList<Konzept>();
		suchErgebnisse[1] = new ArrayList<Konzept>();
		suchErgebnisse[2] = new ArrayList<Konzept>();
		suchErgebnisse[0].add(HauptAnsicht.keineSuchergebnisse);
	    }
	    //else{
	    viewSuchErgebnisse();
	    this.btnSucheLoeschen.setEnabled(true);
	    //}
	} else {
	    //txtSuchen.setText("Geben Sie bitte ein Suchwort ein!");
	}
    }// GEN-LAST:event_btnSuchenActionPerformed

    private void btnBearbeitenActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnBearbeitenActionPerformed
	Schema aktuelles = (Schema) lstSchemata.getSelectedValue();
	if (aktuelles != null) {
	    this.main.fuehreAus("Main_editSchema");
	    this.konzepteInSchema(aktuelles);
	    this.graphAnzeige = aktuelles;
	    this.showGraph(this.graphErzeugen(this.anzuzeigen));
	} else {
	    btnBearbeiten.setEnabled(false);
	}
    }// GEN-LAST:event_btnBearbeitenActionPerformed

    private void tblSuchergebnisseMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_tblSuchergebnisseMouseClicked
	Calendar calendar = Calendar.getInstance();
	Date now = calendar.getTime();
	thesaurusEditor.Konzept aktuelles = this.getKonzept(tblSuchergebnisse.getSelectedRow());
	if (!aktuelles.equals(HauptAnsicht.keineSuchergebnisse)) {
	    if (suchErgebnisClicked != null && (now.getTime() - suchErgebnisClicked.getTime()) < 350) {
		//Doppelklick
		ctrl.setAktuellesKonzept(aktuelles);
		main.fuehreAus("Suchen_KonzeptÖffnen");
		//Irgendwann soll ja der Hauptgraph auf wieder angezeigt werden
		this.showGraph(this.mainGraph);
	    } else {
		//System.out.println("Single clicked");
		if (this.graphAnzeige != null && aktuelles == this.graphAnzeige) {
		    //System.out.println("Einfacher Klick, Schema deselecten");
		    this.tblSuchergebnisse.clearSelection();
		    this.graphAnzeige = null;
		    this.showGraph(this.mainGraph);
		} else {
		    //System.out.println("Einfacher Klick, Schema selecten");
		    if (graphAnzeige != aktuelles) {
			this.lstSchemata.clearSelection();
			ArrayList<Konzept> tmpAnzuzeigen = new ArrayList<Konzept>();
			tmpAnzuzeigen.add(aktuelles);
			tmpAnzuzeigen.addAll(aktuelles.getGeneralisierungen());
			tmpAnzuzeigen.addAll(aktuelles.getSpezialisierungen());
			MainGraph tmp = (MainGraph) this.graphErzeugen(tmpAnzuzeigen);
			this.showGraph(tmp);
			tmp.zoomToVertex(aktuelles);
			graphAnzeige = aktuelles;
		    }
		}
	    }
	}
	suchErgebnisClicked = now;
    }// GEN-LAST:event_tblSuchergebnisseMouseClicked

    private void txtSuchenFocusGained(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtSuchenFocusGained
	if (this.txtSuchen.getText().equals("Geben Sie bitte ein Suchwort ein!")
		|| this.txtSuchen.getText().equals("Hier Suchwort eingeben")) {
	    this.txtSuchen.setText("");
	}
	this.showGraph(this.mainGraph);
    }// GEN-LAST:event_txtSuchenFocusGained

    private void txtSuchenFocusLost(java.awt.event.FocusEvent evt) {// GEN-FIRST:event_txtSuchenFocusLost
	if (this.txtSuchen.getText().isEmpty()) {
	    this.txtSuchen.setText("Hier Suchwort eingeben");
	}
    }// GEN-LAST:event_txtSuchenFocusLost
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBearbeiten;
    private javax.swing.JButton btnSucheLoeschen;
    private javax.swing.JButton btnSuchen;
    private javax.swing.JComboBox cbSprache;
    private javax.swing.JLabel lblTitelSchema;
    private javax.swing.JList lstSchemata;
    private javax.swing.JPanel pnlGraph;
    private javax.swing.JPanel pnlSchemata;
    private javax.swing.JPanel pnlSuchen;
    private javax.swing.JScrollPane scrListeSchemata;
    private javax.swing.JScrollPane scrSuchergebnisse;
    private javax.swing.JSplitPane spSchemaSplitter;
    private javax.swing.JSplitPane spSuchSplitter;
    private javax.swing.JTable tblSuchergebnisse;
    private javax.swing.JTextField txtSuchen;
    // End of variables declaration//GEN-END:variables

    private JPanel graphErzeugen(List<Konzept> konzepte) {
	JPanel graph = new MainGraph(konzepte, this.main);
	graph.setFocusable(true);
	return graph;
    }

    //Brauch die Main um dieses Schema auch zu öffnen
    public Schema getSelectedSchema() {
	return (Schema) this.lstSchemata.getSelectedValue();
    }

    private void konzepteInSchema(Schema s) {
	this.anzuzeigen = new ArrayList<Konzept>();
	for (Konzept k : s.getTopKonzepte()) {
	    this.konzepteInSchema(s, k);
	}
    }

    private void konzepteInSchema(Schema s, Konzept k) {
	if (k.getSchemata().contains(s) && !anzuzeigen.contains(k)) {
	    anzuzeigen.add(k);
	    for (Konzept rek : k.getGeneralisierungen()) {
		konzepteInSchema(s, rek);
	    }
	    for (Konzept rek : k.getSpezialisierungen()) {
		konzepteInSchema(s, rek);
	    }
	}
    }

    private void showGraph(JPanel graph) {
	if (pnlGraph.getComponentCount() > 0) {
	    pnlGraph.removeAll();
	}
	javax.swing.GroupLayout pnlGraphLayout = new javax.swing.GroupLayout(
		this.pnlGraph);
	this.pnlGraph.setLayout(pnlGraphLayout);
	pnlGraphLayout.setHorizontalGroup(pnlGraphLayout.createParallelGroup(
		javax.swing.GroupLayout.Alignment.LEADING).addComponent(graph,
		javax.swing.GroupLayout.DEFAULT_SIZE,
		javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
	pnlGraphLayout.setVerticalGroup(pnlGraphLayout.createParallelGroup(
		javax.swing.GroupLayout.Alignment.LEADING).addComponent(graph,
		javax.swing.GroupLayout.DEFAULT_SIZE,
		javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
	graph.setVisible(true);
	this.repaint();
    }

    /**
     * Zeigt die Liste der Konzepte ohne Bevorzugten Bezeichner an und stellt auch dar, in welcher Sprache die Bevorzugten Bezeichner fehlen.
     * @param konzepteKonzepte, denen bevorzugte Bezeichner fehlen.
     */
    public void showKonzepte(List<Konzept> konzepte) {
	this.suchErgebnisse[0] =
		konzepte;
	String[][] model = new String[konzepte.size()][3];

	for (int i = 0; i < konzepte.size(); i++) {
	    model[i][0] = konzepte.get(i).toString();
	    model[i][1] = "[ ";
	    for (Sprache s : this.ctrl.getThesaurus().getSprachen()) {
		if (!konzepte.get(i).hatBevBezeichnung(s)) {
		    model[i][1] += s.getSprache() + ", ";
		}
	    }
	    if (model[i][1].endsWith(", ")) {
		model[i][1] = model[i][1].substring(0, model[i][1].length() - 2);
	    }
	    model[i][1] += " ]";
	    model[i][2] = konzepte.get(i).getSprachrepraesentationen().get(0).getBeschreibung();
	}
	tblSuchergebnisse.setModel(new javax.swing.table.DefaultTableModel(
		model, new String[]{"HauptBezeichnung",
		    "Fehlende Sprachen", "Bemerkung"}) {

	    @Override
	    public boolean isCellEditable(int rowIndex, int columnIndex) {
		return false;
	    }

	    public boolean isEditable() {
		return false;
	    }
	});

	int dividerGroesse = (konzepte.isEmpty() ? 0 : (konzepte.size() + 1) * 16 + 5);
	dividerGroesse = (int) (dividerGroesse > ((double) this.getSize().getHeight() / 3.0) ? ((double) this.getSize().getHeight() / 3.0) : dividerGroesse);
	spSuchSplitter.setDividerLocation(dividerGroesse);
	this.btnSucheLoeschen.setEnabled(true);
    }

    private void viewSuchErgebnisse() {
	String[][] model = new String[suchErgebnisse[0].size()
		+ suchErgebnisse[1].size() + suchErgebnisse[2].size()][3];
	int i = 0;
	for (int sorte = 0; sorte <= 2; sorte++) {
	    for (int a = 0; a < suchErgebnisse[sorte].size(); a++) {
		if (cbSprache.getSelectedItem().equals(HauptAnsicht.alleSprachen)) {
		    for (Sprache s : this.ctrl.getThesaurus().getSprachen()) {
			Sprachrepraesentation sp = this.suchErgebnisse[sorte].get(a).getSprachrepraesentation(s);
			if (sp != null && sp.enthaeltWort(this.txtSuchen.getText()) != BezeichnungsTyp.kein) {
			    model[i][0] = sp.getBevorzugteBezeichnung();
			    if (model[i][0].isEmpty()) {
				model[i][0] = this.suchErgebnisse[sorte].get(a).toString()
					+ "["
					+ this.suchErgebnisse[sorte].get(a).getSprachrepraesentationen().get(0).getSprache() + "]";
			    }
			    model[i][1] = sp.getAltBezeichnungen().toString();
			    model[i][2] = "Gefunden in der Sprache [" + s
				    + "] - " + sp.getBeschreibung();
			    break;
			}
		    }
		} else {
		    Sprachrepraesentation s = suchErgebnisse[sorte].get(a).getSprachrepraesentation(
			    (Sprache) cbSprache.getSelectedItem());

		    model[i][0] = s.getBevorzugteBezeichnung();
		    model[i][1] = s.getAltBezeichnungen().toString();
		    model[i][2] = s.getBeschreibung();
		}
		i++;
	    }
	}
	tblSuchergebnisse.setModel(new javax.swing.table.DefaultTableModel(
		model, new String[]{"Bevorzugte Bezeichnung",
		    "Alternative Bezeichnung", "Bemerkung"}) {

	    @Override
	    public boolean isCellEditable(int rowIndex, int columnIndex) {
		return false;
	    }

	    public boolean isEditable() {
		return false;
	    }
	});

	int dividerGroesse = (i == 0 ? 0 : (i + 1) * 16 + 5);
	dividerGroesse = (int) (dividerGroesse > ((double) this.getSize().getHeight() / 3.0) ? ((double) this.getSize().getHeight() / 3.0)
		: dividerGroesse);
	spSuchSplitter.setDividerLocation(dividerGroesse);
    }

    private Konzept getKonzept(int selectedRow) {
	if (selectedRow < 0) {
	    return null;
	}
	if (selectedRow < suchErgebnisse[0].size()) {
	    return suchErgebnisse[0].get(selectedRow);
	}
	selectedRow -= suchErgebnisse[0].size();
	if (selectedRow < suchErgebnisse[1].size()) {
	    return suchErgebnisse[1].get(selectedRow);
	}
	selectedRow -= suchErgebnisse[1].size();
	if (selectedRow < suchErgebnisse[2].size()) {
	    return suchErgebnisse[2].get(selectedRow);
	}
	return null;
    }

    public MainGraph getMainGraph() {
	return (MainGraph) mainGraph;
    }

    @Override
    public void update(Observable o, Object obj) {
	if (o instanceof Thesaurus && obj instanceof List
		&& ((List) obj).size() > 0) {
	    if (((List) obj).get(0) instanceof Sprache) {
		List<Sprache> sprachen = this.ctrl.getThesaurus().getSprachen();
		sprachen.add(HauptAnsicht.alleSprachen);
		cbSprache.setModel(new javax.swing.DefaultComboBoxModel(
			sprachen.toArray()));
	    } else if (((List) obj).get(0) instanceof Schema) {
		showSchemaListe((List<Schema>) obj);
		graphAnzeige = null;
		this.showGraph(this.mainGraph);
	    }
	}
    }

    private void showSchemaListe(List<Schema> schemata) {
	DefaultListModel model = new DefaultListModel();
	for (int i = 0; i < schemata.size(); i++) {
	    if (!schemata.get(i).getName().equals("default")) {
		model.addElement(schemata.get(i));
	    }
	}
	lstSchemata.setModel(model);
	lstSchemata.clearSelection();
    }
}
